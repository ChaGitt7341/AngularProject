/* src/styles/_mixins.scss */
@use 'variables' as vars; // Import variables with a namespace

// Mixin for hover effect with slight lift and enhanced shadow
@mixin hover-lift-shadow {
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); // Slightly stronger shadow on hover
  }
}

// Mixin for default button styling (if not purely Material)
@mixin app-button-base {
  padding: 10px 25px;
  font-size: 1.1em;
  border-radius: vars.$border-radius-sm; // Use namespaced variable
  box-shadow: vars.$shadow-z1; // Use namespaced variable
  cursor: pointer;
  border: none; // Ensure no default button border
  @include hover-lift-shadow;
}

// Mixin for RTL specific flex alignment (e.g. aligning buttons to start/end)
@mixin flex-align-rtl($justify-content: flex-start) {
  display: flex;
  @if $justify-content == flex-start {
    justify-content: flex-end; // In RTL, flex-start means right
  } @else if $justify-content == flex-end {
    justify-content: flex-start; // In RTL, flex-end means left
  } @else {
    justify-content: $justify-content; // For center, space-between, etc.
  }
}

// Mixin for common Material form field invalid state overrides (if needed)
@mixin material-form-field-invalid-override {
  ::ng-deep .mat-mdc-form-field.mat-mdc-form-field-invalid {
    .mat-mdc-form-field-outline-thick,
    .mat-mdc-form-field-outline-start,
    .mat-mdc-form-field-outline-end,
    .mat-mdc-form-field-outline-gap,
    .mat-mdc-form-field-label,
    .mat-mdc-error {
      color: vars.$warn-color !important; // Use namespaced variable
      border-color: vars.$warn-color !important; // Use namespaced variable
      background-color: transparent !important; // Ensure background doesn't get colored
    }
  }
}